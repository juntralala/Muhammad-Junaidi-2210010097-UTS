/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ujun.view;

import com.ujun.DB;
import com.ujun.model.Budget;
import com.ujun.service.ExpenseService;
import com.ujun.model.Expense;
import com.ujun.service.AnalysistService;
import com.ujun.service.BudgetService;
import java.io.BufferedReader;
import java.sql.Statement;
import java.io.BufferedWriter;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Arrays;
import java.util.List;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class AppView extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

    private ExpenseService expenceService = null;
    private BudgetService budgetService = null;
    private AnalysistService analysistService = null;

    private DefaultTableModel tablePengeluaranModel = null;
    private DefaultTableModel tableAnggaranModel = null;
    private DefaultTableModel tableSummaryModel = null;
    private DateTimeFormatter formatterIndonesia = DateTimeFormatter.ofPattern("dd-MM-yyyy");

    private Integer expenseId;
    private Integer budgetId;

    public AppView() {
        initComponents();
        this.tablePengeluaranModel = (DefaultTableModel) tablePengeluaran.getModel();
        this.tableAnggaranModel = (DefaultTableModel) tableAnggaran.getModel();
        this.tableSummaryModel = (DefaultTableModel) tableSummary.getModel();

        try {
            this.expenceService = new ExpenseService(DB.getConnection());
            this.budgetService = new BudgetService(DB.getConnection());
            this.analysistService = new AnalysistService(DB.getConnection());
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Gagal Menghubungkan ke Database", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        this.cleanPengeluaranPage();
        this.cleanAnggaranPage();
        this.showPengeluaran();
        this.showAnggaran();
        this.perbaruiLabelSisaAnggaranBulanIni();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        textDeskripsiPengeluaran = new javax.swing.JTextField();
        textJumlahPengeluaran = new javax.swing.JTextField();
        comboBoxTipePengeluaran = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePengeluaran = new javax.swing.JTable();
        dateChooserPengeluaran = new com.toedter.calendar.JDateChooser();
        buttonSimpanPengeluaran = new javax.swing.JButton();
        buttonEditPengeluaran = new javax.swing.JButton();
        buttonHapusPengeluaran = new javax.swing.JButton();
        buttonBatalPengeluaran = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        labelSisaAnggaran = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        textAnggaran = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAnggaran = new javax.swing.JTable();
        buttonSimpanAnggaran = new javax.swing.JButton();
        buttonEditAnggaran = new javax.swing.JButton();
        buttonHapusAnggaran = new javax.swing.JButton();
        buttonBatalAnggaran = new javax.swing.JButton();
        monthChooserAnggaran = new com.toedter.calendar.JMonthChooser();
        yearChooserAnggaran = new com.toedter.calendar.JYearChooser();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSummary = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1337, 750));

        jPanel2.setPreferredSize(new java.awt.Dimension(695, 35));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Aplikasi Kelola Keuangan Pribadi");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setIconTextGap(100);
        jPanel2.add(jLabel1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(10, 10));

        jPanel1.setPreferredSize(new java.awt.Dimension(500, 300));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Tipe Pengeluaran");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 59;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 6, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Jumlah Pengeluaran");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 37;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 6, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Deskripsi");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 122;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 6, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Tanggal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 131;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        textDeskripsiPengeluaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 667;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 180, 0, 0);
        jPanel1.add(textDeskripsiPengeluaran, gridBagConstraints);

        textJumlahPengeluaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        textJumlahPengeluaran.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textJumlahPengeluaranKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 667;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 180, 0, 0);
        jPanel1.add(textJumlahPengeluaran, gridBagConstraints);

        comboBoxTipePengeluaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        comboBoxTipePengeluaran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih", "Pokok", "Pangan", "Kesehatan", "Hiburan", "Pendidikan" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 601;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 180, 0, 0);
        jPanel1.add(comboBoxTipePengeluaran, gridBagConstraints);

        jScrollPane3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jScrollPane3.setPreferredSize(new java.awt.Dimension(452, 200));

        tablePengeluaran.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tablePengeluaran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tipe", "Jumlah", "Deskripsi", "Tanggal"
            }
        ));
        tablePengeluaran.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePengeluaranMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablePengeluaran);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1238;
        gridBagConstraints.ipady = 210;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(68, 41, 6, 42);
        jPanel1.add(jScrollPane3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 649;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 180, 0, 0);
        jPanel1.add(dateChooserPengeluaran, gridBagConstraints);

        buttonSimpanPengeluaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonSimpanPengeluaran.setText("Simpan");
        buttonSimpanPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSimpanPengeluaranActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 181, 0, 0);
        jPanel1.add(buttonSimpanPengeluaran, gridBagConstraints);

        buttonEditPengeluaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonEditPengeluaran.setText("Edit");
        buttonEditPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditPengeluaranActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 29, 0, 0);
        jPanel1.add(buttonEditPengeluaran, gridBagConstraints);

        buttonHapusPengeluaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonHapusPengeluaran.setText("Hapus");
        buttonHapusPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHapusPengeluaranActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 26, 0, 0);
        jPanel1.add(buttonHapusPengeluaran, gridBagConstraints);

        buttonBatalPengeluaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonBatalPengeluaran.setText("Batal");
        buttonBatalPengeluaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBatalPengeluaranActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 26, 0, 0);
        jPanel1.add(buttonBatalPengeluaran, gridBagConstraints);

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton3.setText("Export CSV");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 82, 0, 0);
        jPanel1.add(jButton3, gridBagConstraints);

        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton4.setText("Import CSV");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        jPanel1.add(jButton4, gridBagConstraints);

        labelSisaAnggaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        labelSisaAnggaran.setText("Sisa Anggaran Bulan Ini: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 6, 0, 0);
        jPanel1.add(labelSisaAnggaran, gridBagConstraints);

        jTabbedPane1.addTab("Pengeluaran", jPanel1);

        jPanel4.setPreferredSize(new java.awt.Dimension(1337, 200));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        textAnggaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        textAnggaran.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textAnggaranKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 835;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 301, 0, 0);
        jPanel4.add(textAnggaran, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Anggaran");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 53;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 6, 0, 0);
        jPanel4.add(jLabel9, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel12.setText("Tahun");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 83;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        jPanel4.add(jLabel12, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel13.setText("Bulan");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 88;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(26, 6, 0, 0);
        jPanel4.add(jLabel13, gridBagConstraints);

        tableAnggaran.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableAnggaran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Anggaran", "Bulan", "Tahun"
            }
        ));
        tableAnggaran.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAnggaranMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableAnggaran);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1206;
        gridBagConstraints.ipady = 264;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(97, 58, 27, 0);
        jPanel4.add(jScrollPane2, gridBagConstraints);

        buttonSimpanAnggaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonSimpanAnggaran.setText("Simpan");
        buttonSimpanAnggaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSimpanAnggaranActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 303, 0, 0);
        jPanel4.add(buttonSimpanAnggaran, gridBagConstraints);

        buttonEditAnggaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonEditAnggaran.setText("Edit");
        buttonEditAnggaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditAnggaranActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 0);
        jPanel4.add(buttonEditAnggaran, gridBagConstraints);

        buttonHapusAnggaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonHapusAnggaran.setText("Hapus");
        buttonHapusAnggaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHapusAnggaranActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 0);
        jPanel4.add(buttonHapusAnggaran, gridBagConstraints);

        buttonBatalAnggaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        buttonBatalAnggaran.setText("Batal");
        buttonBatalAnggaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBatalAnggaranActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 0);
        jPanel4.add(buttonBatalAnggaran, gridBagConstraints);

        monthChooserAnggaran.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 223;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 301, 0, 0);
        jPanel4.add(monthChooserAnggaran, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 332;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 301, 0, 0);
        jPanel4.add(yearChooserAnggaran, gridBagConstraints);

        jTabbedPane1.addTab("Anggaran", jPanel4);

        jPanel5.setPreferredSize(new java.awt.Dimension(1080, 400));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        tableSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bulan", "Tahun", "Total Transaksi", "Total Pengeluaran", "Rata-rata Pengeluaran"
            }
        ));
        jScrollPane1.setViewportView(tableSummary);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1223;
        gridBagConstraints.ipady = 425;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(67, 27, 26, 71);
        jPanel5.add(jScrollPane1, gridBagConstraints);

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setText("Rangkuman Bulanan");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 35, 0, 0);
        jPanel5.add(jButton1, gridBagConstraints);

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton2.setText("Export To CSV");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 18, 0, 0);
        jPanel5.add(jButton2, gridBagConstraints);

        jTabbedPane1.addTab("Analisis", jPanel5);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleName("TabbedPanel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSimpanAnggaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSimpanAnggaranActionPerformed
        if (this.validateInputAnggaran()) {
            return;
        }

        try {
            var budget = new Budget(
                    Double.valueOf(textAnggaran.getText()),
                    monthChooserAnggaran.getMonth() + 1,
                    yearChooserAnggaran.getYear()
            );

            this.budgetService.add(budget);
            this.cleanAnggaranPage();
            this.showAnggaran();
            this.perbaruiLabelSisaAnggaranBulanIni();
            JOptionPane.showMessageDialog(this, "Sukses");

//            if(this.analysistService.isOverBudget()){
//                JOptionPane.showMessageDialog(this, "Pengeluaran melebihi Anggaran", "Awas", JOptionPane.WARNING_MESSAGE);
//            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data anggaran");
        }
    }//GEN-LAST:event_buttonSimpanAnggaranActionPerformed

    private void buttonBatalAnggaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBatalAnggaranActionPerformed
        this.cleanAnggaranPage();
    }//GEN-LAST:event_buttonBatalAnggaranActionPerformed

    private void buttonHapusAnggaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHapusAnggaranActionPerformed
        try {
            this.budgetService.delete(this.budgetId);
            this.cleanAnggaranPage();
            this.showAnggaran();
            this.perbaruiLabelSisaAnggaranBulanIni();
            JOptionPane.showMessageDialog(this, "Berhasil dihapus", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Gagal menghapus data", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonHapusAnggaranActionPerformed

    private void tableAnggaranMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAnggaranMouseClicked
        int row = tableAnggaran.getSelectedRow();
        this.budgetId = Integer.valueOf(tableAnggaran.getValueAt(row, 0).toString());
        textAnggaran.setText(tableAnggaran.getValueAt(row, 1).toString());
        monthChooserAnggaran.setMonth(
                this.monthNameToInt(tableAnggaran.getValueAt(row, 2).toString()) - 1
        );
        yearChooserAnggaran.setYear(Integer.parseInt(tableAnggaran.getValueAt(row, 3).toString()));
        buttonSimpanAnggaran.setEnabled(false);
        buttonEditAnggaran.setEnabled(true);
        buttonHapusAnggaran.setEnabled(true);
    }//GEN-LAST:event_tableAnggaranMouseClicked

    private void buttonEditAnggaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditAnggaranActionPerformed
        var budget = new Budget(
                this.budgetId,
                Double.valueOf(textAnggaran.getText()),
                monthChooserAnggaran.getMonth() + 1,
                yearChooserAnggaran.getYear()
        );

        try {
            this.budgetService.update(budget);
            this.cleanAnggaranPage();
            this.showAnggaran();
            this.perbaruiLabelSisaAnggaranBulanIni();
            JOptionPane.showMessageDialog(this, "Sukses Mengedit data anggaran");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Gagal menghapus data", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonEditAnggaranActionPerformed

    private void buttonBatalPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBatalPengeluaranActionPerformed
        this.cleanPengeluaranPage();
    }//GEN-LAST:event_buttonBatalPengeluaranActionPerformed

    private void buttonHapusPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHapusPengeluaranActionPerformed
        if (this.validateInputPengeluaran()) {
            return;
        }

        try {
            this.expenceService.delete(this.expenseId);
            this.cleanPengeluaranPage();
            this.showPengeluaran();
            this.perbaruiLabelSisaAnggaranBulanIni();
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Data gagal dihapus");
        }
    }//GEN-LAST:event_buttonHapusPengeluaranActionPerformed

    private void buttonEditPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditPengeluaranActionPerformed
        try {
            this.expenceService.update(new Expense(
                    this.expenseId,
                    comboBoxTipePengeluaran.getSelectedItem().toString(),
                    Double.valueOf(textJumlahPengeluaran.getText()),
                    textDeskripsiPengeluaran.getText(),
                    this.utilDateToLocalDate(dateChooserPengeluaran.getDate())
            ));
            this.showPengeluaran();
            this.cleanPengeluaranPage();
            this.perbaruiLabelSisaAnggaranBulanIni();
            JOptionPane.showMessageDialog(this, "Berhasil mengedit data");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal mengedit data");
        }
    }//GEN-LAST:event_buttonEditPengeluaranActionPerformed

    private void buttonSimpanPengeluaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSimpanPengeluaranActionPerformed
        if (this.validateInputPengeluaran()) {
            return;
        }

        try {
            String tipe = comboBoxTipePengeluaran.getSelectedItem().toString();
            var expense = new Expense(
                    tipe,
                    Double.valueOf(textJumlahPengeluaran.getText()),
                    textDeskripsiPengeluaran.getText(),
                    this.utilDateToLocalDate(dateChooserPengeluaran.getDate())
            );
            this.expenceService.add(expense);
            this.showPengeluaran();
            this.cleanPengeluaranPage();
            this.perbaruiLabelSisaAnggaranBulanIni();
            JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan", "SUKSES", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error saat menambahkan data", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSimpanPengeluaranActionPerformed

    private void tablePengeluaranMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePengeluaranMouseClicked
        int row = tablePengeluaran.getSelectedRow();
        this.expenseId = Integer.valueOf(tablePengeluaran.getValueAt(row, 0).toString());
        comboBoxTipePengeluaran.setSelectedItem(tablePengeluaran.getValueAt(row, 1));
        textJumlahPengeluaran.setText(tablePengeluaran.getValueAt(row, 2).toString());
        textDeskripsiPengeluaran.setText(tablePengeluaran.getValueAt(row, 3).toString());
        dateChooserPengeluaran.setDate(
                this.localDateToUtilDate(this.stringToLocalDate(tablePengeluaran.getValueAt(row, 4).toString()))
        );
        buttonSimpanPengeluaran.setEnabled(false);
        buttonEditPengeluaran.setEnabled(true);
        buttonHapusPengeluaran.setEnabled(true);
    }//GEN-LAST:event_tablePengeluaranMouseClicked

    private void textJumlahPengeluaranKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textJumlahPengeluaranKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_textJumlahPengeluaranKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.showSummaryMonthlyExpense();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.exportToCSV();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.exportDataPengeluaran();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.importDataPengeluaran();
        this.showPengeluaran();
        this.perbaruiLabelSisaAnggaranBulanIni();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void textAnggaranKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAnggaranKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_textAnggaranKeyTyped

    private void cleanPengeluaranPage() {
        comboBoxTipePengeluaran.setSelectedIndex(0);
        textJumlahPengeluaran.setText("");
        textDeskripsiPengeluaran.setText("");
        dateChooserPengeluaran.setDate(Date.from(Instant.now()));
        buttonSimpanPengeluaran.setEnabled(true);
        buttonEditPengeluaran.setEnabled(false);
        buttonHapusPengeluaran.setEnabled(false);
    }

    private void cleanAnggaranPage() {
        var date = LocalDate.now(ZoneId.systemDefault());
        textAnggaran.setText("");
        monthChooserAnggaran.setMonth(date.getMonthValue() - 1);
        yearChooserAnggaran.setYear(date.getYear());
        buttonSimpanAnggaran.setEnabled(true);
        buttonEditAnggaran.setEnabled(false);
        buttonHapusAnggaran.setEnabled(false);
    }

    private void showPengeluaran() {
        try {
            this.tablePengeluaranModel.setRowCount(0);
            this.expenceService.getAll().stream()
                    .map((value) -> value.toArray())
                    .forEach((value) -> {
                        this.tablePengeluaranModel.addRow(value);
                    });
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Terjadi Error ketika mengambil data", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void showAnggaran() {
        try {
            this.tableAnggaranModel.setRowCount(0);
            this.budgetService.getAll().stream()
                    .map((value) -> value.toArray())
                    .forEach((value) -> {
                        this.tableAnggaranModel.addRow(value);
                    });
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Terjadi Error ketika mengambil data", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void showSummaryMonthlyExpense() {
        try {
            this.tableSummaryModel.setRowCount(0);
            this.analysistService.summaryMonthlyExpense()
                    .stream()
                    .map(value -> value.toArray())
                    .forEach(value -> this.tableSummaryModel.addRow(value));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private LocalDate utilDateToLocalDate(java.util.Date utilDate) {
        return utilDate.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }

    private java.util.Date localDateToUtilDate(LocalDate localDate) {
        return Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());
    }

    private LocalDate stringToLocalDate(String date) {
        return LocalDate.parse(date, this.formatterIndonesia);
    }

    // memeriksa inputan invalid atau valid
    private boolean validateInputPengeluaran() {
        boolean isInvalid = false;
        if (comboBoxTipePengeluaran.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Tipe pengeluaran belum dipilih", "Invalid", JOptionPane.WARNING_MESSAGE);
            isInvalid = true;
        } else if (textDeskripsiPengeluaran.getText().isBlank())  {
            JOptionPane.showMessageDialog(this, "Deskripsi pengeluaran tidak boleh kosong", "Invalid", JOptionPane.WARNING_MESSAGE);
            isInvalid = true;
        } else if (textJumlahPengeluaran.getText().isBlank()) {
            JOptionPane.showMessageDialog(this, "Jumlah pengeluaran harus diisi", "Invalid", JOptionPane.WARNING_MESSAGE);
            isInvalid = true;
        } else if (dateChooserPengeluaran.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Tanggal belum dipilih", "Invalid", JOptionPane.WARNING_MESSAGE);
            isInvalid = true;
        }
        return isInvalid;
    }

    private boolean validateInputAnggaran() {
        if (textAnggaran.getText().isBlank()
                || monthChooserAnggaran.getMonth() == 0
                || yearChooserAnggaran.getYear() == 0) {
            JOptionPane.showMessageDialog(this, "Harap isi semua inputan sebelum menyimpan anggaran");
            return true;
        }
        return false;
    }

    private int monthNameToInt(String monthName) {
        return switch (monthName.toLowerCase()) {
            case "januari" ->
                1;
            case "februari" ->
                2;
            case "maret" ->
                3;
            case "april" ->
                4;
            case "mei" ->
                5;
            case "juni" ->
                6;
            case "juli" ->
                7;
            case "agustus" ->
                8;
            case "september" ->
                9;
            case "oktober" ->
                10;
            case "november" ->
                11;
            case "desember" ->
                12;
            default ->
                0;
        };
    }

    private void perbaruiLabelSisaAnggaranBulanIni() {
        try {
            Double sisaAnggaranBulanIni = this.analysistService.remaingBudgetThisMonth();
            if (sisaAnggaranBulanIni != null) {
                labelSisaAnggaran.setText("Sisa Anggaran Bulan ini: %.2f".formatted(sisaAnggaranBulanIni));
            } else {
                labelSisaAnggaran.setText("Anda belum memasukkan data anggaran untuk bulan ini!");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppView().setVisible(true);
            }
        });
    }

    private void exportToCSV() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                FileWriter writer = new FileWriter(file);

                // Ambil data dari tabel atau komponen lain di aplikasi
                Object[][] data = getDataFromTable();
                String[] columnNames = getColumnNamesFromTable();

                // Tulis data ke file CSV
                writer.write(String.join(",", columnNames));
                writer.write("\n");
                for (Object[] row : data) {
                    writer.write(String.join(",", Arrays.stream(row).map(Object::toString).toArray(String[]::new)));
                    writer.write("\n");
                }
                writer.close();
                JOptionPane.showMessageDialog(this, "Data berhasil diekspor ke file CSV.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengekspor data: " + e.getMessage());
            }
        }
    }

    private Object[][] getDataFromTable() {
        int rowCount = tableSummary.getRowCount();
        var result = new ArrayList<Object[]>();
        for (int i = 0; i < rowCount; i++) {
            result.add(new Object[]{
                tableSummary.getValueAt(i, 0),
                tableSummary.getValueAt(i, 1),
                tableSummary.getValueAt(i, 2),
                tableSummary.getValueAt(i, 3),
                tableSummary.getValueAt(i, 4)
            }
            );
        }
        return result.toArray(new Object[][]{});
    }

    private String[] getColumnNamesFromTable() {
        return new String[]{
            this.tableSummaryModel.getColumnName(0),
            this.tableSummaryModel.getColumnName(1),
            this.tableSummaryModel.getColumnName(2),
            this.tableSummaryModel.getColumnName(3),
            this.tableSummaryModel.getColumnName(4)
        };
    }

    private void exportDataPengeluaran() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih lokasi file export");
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files (*.csv)", "csv"));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".csv")) {
                filePath += ".csv";
            }
            exportToCSV(filePath);
        }
    }

    private void importDataPengeluaran() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih file CSV untuk import");
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files (*.csv)", "csv"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    """
                Apakah Anda yakin ingin mengimport data dari file ini?\n
                Pastikan format file sesuai untuk menghindari kesalahan.""",
                    "Konfirmasi Import",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                importFromCSV(fileChooser.getSelectedFile().getAbsolutePath());
            }
        }
    }

    private void exportToCSV(String filePath) {
        try (FileWriter fw = new FileWriter(filePath); BufferedWriter bw = new BufferedWriter(fw)) {

            // Write header
            bw.write("id,tipe,jumlah,deskripsi,tanggal");
            bw.newLine();

            // Query data
            String sql = "SELECT * FROM pengeluaran ORDER BY tanggal DESC";
            try (Statement stmt = DB.getConnection().createStatement(); var rs = stmt.executeQuery(sql)) {

                while (rs.next()) {
                    StringBuilder line = new StringBuilder();

                    // ID
                    line.append(rs.getInt("id")).append(",");

                    // Tipe
                    String tipe = rs.getString("tipe");
                    line.append(escapeCSV(tipe)).append(",");

                    // Jumlah
                    line.append(String.format("%.2f", rs.getDouble("jumlah"))).append(",");

                    // Deskripsi
                    String deskripsi = rs.getString("deskripsi");
                    line.append(escapeCSV(deskripsi)).append(",");

                    // Tanggal
                    Timestamp timestamp = rs.getTimestamp("tanggal");
                    line.append(sdf.format(timestamp));

                    bw.write(line.toString());
                    bw.newLine();
                }
            }

            JOptionPane.showMessageDialog(this,
                    "Data berhasil diekspor ke:\n" + filePath,
                    "Export Berhasil",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error saat mengekspor data: " + e.getMessage(),
                    "Export Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void importFromCSV(String filePath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            // Skip header
            br.readLine();

            // Prepare statement
            String sql = "INSERT INTO pengeluaran (tipe, jumlah, deskripsi, tanggal) VALUES (?, ?, ?, ?)";

            DB.getConnection().setAutoCommit(false); // Start transaction

            try (var pstmt = DB.getConnection().prepareStatement(sql)) {
                String line;
                int successCount = 0;
                int totalCount = 0;

                while ((line = br.readLine()) != null) {
                    totalCount++;
                    List<String> values = parseCSVLine(line);

                    if (values.size() >= 5) {  // Pastikan jumlah kolom sesuai
                        try {
                            // Tipe (index 1 karena index 0 adalah id)
                            pstmt.setString(1, values.get(1));

                            // Jumlah
                            pstmt.setDouble(2, Double.parseDouble(values.get(2)));

                            // Deskripsi
                            pstmt.setString(3, values.get(3));

                            // Tanggal
                            Date date = sdf.parse(values.get(4));
                            pstmt.setTimestamp(4, new Timestamp(date.getTime()));

                            pstmt.executeUpdate();
                            successCount++;
                        } catch (Exception e) {
                            System.err.println("Error pada baris " + totalCount + ": " + line);
                            e.printStackTrace();
                        }
                    }
                }

                DB.getConnection().commit(); // Commit transaction

                JOptionPane.showMessageDialog(this,
                        String.format("Import selesai!\n%d dari %d data berhasil diimpor.",
                                successCount, totalCount),
                        "Import Berhasil",
                        JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception e) {
                DB.getConnection().rollback(); // Rollback if error
                throw e;
            } finally {
                DB.getConnection().setAutoCommit(true); // Reset auto commit
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error saat mengimpor data: " + e.getMessage(),
                    "Import Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private String escapeCSV(String value) {
        if (value == null) {
            return "";
        }
        if (value.contains(",") || value.contains("\"") || value.contains("\n")) {
            return "\"" + value.replace("\"", "\"\"") + "\"";
        }
        return value;
    }

    private List<String> parseCSVLine(String line) {
        List<String> values = new ArrayList<>();
        boolean inQuotes = false;
        StringBuilder currentValue = new StringBuilder();

        for (char c : line.toCharArray()) {
            if (c == '\"') {
                inQuotes = !inQuotes;
            } else if (c == ',' && !inQuotes) {
                values.add(currentValue.toString().trim());
                currentValue = new StringBuilder();
            } else {
                currentValue.append(c);
            }
        }
        values.add(currentValue.toString().trim());

        return values;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBatalAnggaran;
    private javax.swing.JButton buttonBatalPengeluaran;
    private javax.swing.JButton buttonEditAnggaran;
    private javax.swing.JButton buttonEditPengeluaran;
    private javax.swing.JButton buttonHapusAnggaran;
    private javax.swing.JButton buttonHapusPengeluaran;
    private javax.swing.JButton buttonSimpanAnggaran;
    private javax.swing.JButton buttonSimpanPengeluaran;
    private javax.swing.JComboBox<String> comboBoxTipePengeluaran;
    private com.toedter.calendar.JDateChooser dateChooserPengeluaran;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelSisaAnggaran;
    private com.toedter.calendar.JMonthChooser monthChooserAnggaran;
    private javax.swing.JTable tableAnggaran;
    private javax.swing.JTable tablePengeluaran;
    private javax.swing.JTable tableSummary;
    private javax.swing.JTextField textAnggaran;
    private javax.swing.JTextField textDeskripsiPengeluaran;
    private javax.swing.JTextField textJumlahPengeluaran;
    private com.toedter.calendar.JYearChooser yearChooserAnggaran;
    // End of variables declaration//GEN-END:variables
}
